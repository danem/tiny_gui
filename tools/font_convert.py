import freetype
import argparse
from dataclasses import dataclass
import datetime

# ---------------------------------
# Based on AdafruitGFX font convert
# 

@dataclass
class GlyphInfo:
    charCode = None
    bitmapOffset = None
    width = None
    height = None
    xAdvance = None
    xOffset = None
    yOffset = None

class Packer:
    def __init__ (self):
        self._bit = 0x80
        self._sum = 0
        self._values = []
    
    def add (self, value):
        if value:
            self._sum = self._sum | self._bit
        self._bit = self._bit >> 1
        if not self._bit:
            self._values.append(self._sum)
            self._sum = 0
            self._bit = 0x80

def outputBitmaps (name, bitmap, tableWidth = 12):
    tableStr = ""
    rowStr = ""
    for i, v in enumerate(bitmap):
        rowStr += "0x{:02X}, ".format(v)
        if (i+1) % tableWidth == 0:
            rowStr += "\n"
            tableStr += rowStr
            rowStr = ""
    tableStr = "const uint8_t {0}Bitmap[] PROGMEM = {{\n{1}\n}};".format(name, tableStr)
    return tableStr

def outputGlyphTable (name, table):
    tableStr = ""
    for k, v in table.items():
        rowStr = "{{ {0}, {1}, {2}, {3}, {4}, {5}, {6} }}, // '{7}'\n".format(v.charCode, v.bitmapOffset, v.width, v.height, v.xAdvance >> 6, v.xOffset, v.yOffset, chr(k))
        tableStr += rowStr
    tableStr = "const tiny_gui::Glyph {0}Glyphs[] PROGMEM = {{\n{1}\n}};".format(name, tableStr)
    return tableStr

def outputFontInfo (name, charRange):
    return """
const tiny_gui::Font {0}Font PROGMEM = {{\n\
    {1}Bitmap,\n\
    {2}Glyphs,\n\
    {3},\n\
    {4},\n\
    {5},\n\
    {6},\n\
}};\
    """.format(name, name, name, charRange[0], charRange[-1], 0, len(charRange))

def outputCompleteFont (name, bitmap, glyphs, charRange):
    return """
#include <tiny_gui/font.h>\n\n\
// Generated by font_convert.py on {0:%Y-%m-%d %H:%M}. Do not edit by hand!\n\n\
#ifndef PROGMEM\n\
#define PROGMEM\n\
#endif\n\n\
{1}\n\n\
{2}\n\n\
{3}\n\n\
    """.format(
        datetime.datetime.now(),
        outputBitmaps(name, bitmap),
        outputGlyphTable(name, glyphs),
        outputFontInfo(name, charRange)
    )


def main ():
    parser = argparse.ArgumentParser()
    parser.add_argument("font", help="Path to TTF file")
    parser.add_argument("name", help="Name of font structs")
    parser.add_argument("size", type=int, help="font size")
    parser.add_argument("chars", type=str, help="Set of symbols to include in font")
    parser.add_argument("--dpi", type=int, default=141, help="DPI")
    args = parser.parse_args()

    packer = Packer()
    glyph_infos = {}
    bitmapOffset = 0

    font = freetype.Face(args.font)
    font.set_char_size(args.size << 6, 0, args.dpi, 0)

    chars = sorted(set(args.chars + " "))
    charRange = [ord(x) for x in chars]
    charRange.insert(0, ord(' '))

    for c in charRange:
        index = font.get_char_index(c)
        font.load_glyph(index, freetype.FT_LOAD_TARGET_MONO | freetype.FT_LOAD_RENDER)

        # This breaks if there are somehow duplicate chars

        glyphInfo = glyph_infos.setdefault(c,GlyphInfo())
        glyphInfo.width = font.glyph.bitmap.width
        glyphInfo.height = font.glyph.bitmap.rows
        glyphInfo.charCode = c
        glyphInfo.bitmapOffset = bitmapOffset
        glyphInfo.xAdvance = font.glyph.advance.x
        glyphInfo.xOffset = font.glyph.bitmap_left
        glyphInfo.yOffset = 1 - font.glyph.bitmap_top

        packed = 0
        for j in range(font.glyph.bitmap.rows):
            for i in range(font.glyph.bitmap.width):
                byteSel = i // 8
                bitSel = 0x80 >> (i & 7)
                value = font.glyph.bitmap.buffer[j * font.glyph.bitmap.pitch + byteSel] & bitSel
                packer.add(value)
                
                #if (value):
                #    packed |= value

                #if (bitSel == 1):
                #    packedMap.append(packed)
                #    packed = 0

        # TODO: Pad rest of map.
        n = (glyphInfo.width * glyphInfo.height) & 7
        if n:
            n = 8 - n
            while n:
                n -= 1
                packer.add(0)


        bitmapOffset += (font.glyph.bitmap.width * font.glyph.bitmap.rows + 7) // 8

    # Print output
    print(outputCompleteFont(args.name, packer._values, glyph_infos, charRange))

if __name__ == "__main__":
    main()
        
        







