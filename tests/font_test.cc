#include <SimpleGL/helpers/SimpleGLHelpers.h>
#include <tiny_gui/tiny_gui.h>
#include <tiny_gui/font.h>
#include <array>


#ifndef PROGMEM
#define PROGMEM
#endif

const uint8_t RobotoRegular8Bitmap[] PROGMEM = {
0x00, 0x00, 0x38, 0x8B, 0x1C, 0x18, 0x30, 0x60, 0xC1, 0x83, 0x8D, 0x11,
0xC0, 0x1B, 0xF6, 0x31, 0x8C, 0x63, 0x18, 0xC6, 0x30, 0x79, 0x8A, 0x1C,
0x30, 0x60, 0x83, 0x0C, 0x30, 0xC3, 0x07, 0xF0, 0x79, 0x8A, 0x18, 0x30,
0x47, 0x01, 0x03, 0x07, 0x0F, 0x13, 0xC0, 0x06, 0x03, 0x02, 0x83, 0x41,
0x21, 0x90, 0x88, 0x84, 0xFF, 0x81, 0x00, 0x80, 0x40, 0x7E, 0x81, 0x02,
0x07, 0xC8, 0xC0, 0x81, 0x03, 0x85, 0x19, 0xE0, 0x1C, 0x41, 0x06, 0x0F,
0xD8, 0xF0, 0xC1, 0xC3, 0x85, 0x99, 0xE0, 0xFE, 0x04, 0x18, 0x20, 0xC1,
0x06, 0x08, 0x10, 0x60, 0x83, 0x00, 0x78, 0x8B, 0x1E, 0x34, 0x47, 0x11,
0x41, 0x83, 0x07, 0x1B, 0xE0, 0x79, 0x9A, 0x1C, 0x38, 0x70, 0xF1, 0xBF,
0x06, 0x08, 0x33, 0x80, 0x0C, 0x03, 0x01, 0xE0, 0x78, 0x12, 0x0C, 0xC3,
0x30, 0x84, 0x7F, 0x90, 0x24, 0x0B, 0x03, 0xFC, 0xC2, 0xC3, 0xC3, 0xC2,
0xFC, 0xC3, 0xC3, 0xC1, 0xC3, 0xC3, 0xFC, 0x3E, 0x31, 0x90, 0x58, 0x38,
0x04, 0x02, 0x01, 0x00, 0xC1, 0xA0, 0x98, 0xC7, 0xC0, 0xFC, 0x63, 0x30,
0xD8, 0x2C, 0x16, 0x0F, 0x07, 0x82, 0xC1, 0x61, 0xB1, 0x9F, 0x80, 0xFE,
0xC0, 0xC0, 0xC0, 0xC0, 0xFE, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF,
0x83, 0x06, 0x0C, 0x1F, 0xF0, 0x60, 0xC1, 0x83, 0x06, 0x00, 0x3E, 0x31,
0x90, 0x58, 0x3C, 0x04, 0x02, 0x1F, 0x83, 0xC1, 0xA0, 0xD8, 0x63, 0xC0,
0xC0, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0x07, 0xFF, 0x81, 0xC0, 0xE0, 0x70,
0x38, 0x10, 0xFF, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
0x03, 0x03, 0xC2, 0x66, 0x3C, 0xC3, 0xE1, 0x31, 0x99, 0x8D, 0x87, 0x83,
0xA1, 0x98, 0xC6, 0x61, 0x30, 0xD8, 0x30, 0xC1, 0x83, 0x06, 0x0C, 0x18,
0x30, 0x60, 0xC1, 0x83, 0x07, 0xF0, 0xC0, 0x3E, 0x07, 0xE0, 0x7F, 0x0F,
0xD0, 0xBD, 0x0B, 0xD9, 0xBC, 0x93, 0xCB, 0x3C, 0xF3, 0xC6, 0x3C, 0x63,
0xC1, 0xE0, 0xF8, 0x7E, 0x3D, 0x1E, 0xCF, 0x37, 0x9B, 0xC7, 0xE1, 0xF0,
0xF8, 0x30, 0x3E, 0x31, 0x90, 0x58, 0x38, 0x0C, 0x06, 0x03, 0x01, 0xC1,
0xA0, 0x98, 0xC7, 0xC0, 0xFE, 0xC3, 0xC1, 0xC1, 0xC1, 0xC3, 0xFE, 0xC0,
0xC0, 0xC0, 0xC0, 0xC0, 0x3E, 0x31, 0x90, 0x58, 0x38, 0x1C, 0x06, 0x03,
0x03, 0xC1, 0xE0, 0x98, 0xC7, 0xC0, 0x38, 0x08, 0xFE, 0x61, 0xB0, 0xD8,
0x2C, 0x36, 0x1B, 0xF1, 0x88, 0xC6, 0x61, 0x30, 0xD8, 0x30, 0x3C, 0x42,
0xC3, 0xC0, 0x40, 0x70, 0x1C, 0x03, 0x01, 0xC1, 0x43, 0x3E, 0xFF, 0x86,
0x03, 0x01, 0x80, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x80,
0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xC3, 0x42, 0x3C,
0xC0, 0xD0, 0x26, 0x19, 0x86, 0x21, 0x0C, 0xC3, 0x30, 0x48, 0x1E, 0x07,
0x80, 0xC0, 0x30, 0xC3, 0x0D, 0x0C, 0x36, 0x30, 0x98, 0xE2, 0x26, 0x98,
0x92, 0x62, 0x4D, 0x0D, 0x14, 0x3C, 0x50, 0x61, 0xC1, 0x86, 0x06, 0x08,
0x61, 0xD8, 0x63, 0x30, 0x48, 0x1E, 0x03, 0x00, 0xC0, 0x78, 0x12, 0x0C,
0xC6, 0x1B, 0x83, 0xC0, 0xB0, 0xD8, 0x46, 0x63, 0x20, 0xF0, 0x30, 0x18,
0x0C, 0x06, 0x03, 0x01, 0x80, 0xFF, 0x02, 0x06, 0x0C, 0x08, 0x18, 0x10,
0x30, 0x60, 0x40, 0xC0, 0xFF, 0x38, 0x8B, 0x18, 0x37, 0xF8, 0xE1, 0xE3,
0x7E, 0xC1, 0x83, 0x07, 0xEC, 0x78, 0x70, 0xE1, 0xC3, 0x87, 0x1D, 0xE0,
0x79, 0x8A, 0x1C, 0x08, 0x10, 0x21, 0xE2, 0x78, 0x06, 0x0C, 0x1B, 0xFC,
0x70, 0xE1, 0xC3, 0x87, 0x0F, 0x1B, 0xD0, 0x3C, 0x66, 0x42, 0x43, 0xFF,
0x40, 0x40, 0x63, 0x3C, 0x3B, 0x19, 0xE6, 0x31, 0x8C, 0x63, 0x18, 0xC0,
0x7B, 0x8F, 0x1C, 0x38, 0x70, 0xE1, 0xE3, 0x7E, 0x0F, 0x13, 0xC0, 0xC1,
0x83, 0x07, 0xEC, 0x78, 0xF1, 0xE3, 0xC7, 0x8F, 0x1E, 0x30, 0xF3, 0xFF,
0xFF, 0x6C, 0x36, 0xDB, 0x6D, 0xB6, 0xF0, 0xC1, 0x83, 0x06, 0x3C, 0x9B,
0x3C, 0x78, 0xD9, 0x93, 0x36, 0x30, 0xFF, 0xFF, 0xFF, 0xBD, 0xEC, 0x63,
0xC6, 0x3C, 0x63, 0xC6, 0x3C, 0x63, 0xC6, 0x3C, 0x63, 0xC6, 0x30, 0xFD,
0x8F, 0x1E, 0x3C, 0x78, 0xF1, 0xE3, 0xC6, 0x38, 0x8A, 0x0C, 0x18, 0x30,
0x60, 0xA3, 0x38, 0xBD, 0x8F, 0x1E, 0x1C, 0x38, 0x71, 0xE3, 0xFD, 0x83,
0x06, 0x00, 0x7F, 0x8E, 0x1C, 0x38, 0x70, 0xE1, 0xE3, 0x7E, 0x0C, 0x18,
0x30, 0xBC, 0x88, 0x88, 0x88, 0x80, 0x7B, 0x38, 0x70, 0x78, 0x38, 0x71,
0x78, 0x63, 0x3E, 0xC6, 0x31, 0x8C, 0x61, 0x0E, 0xC7, 0x8F, 0x1E, 0x3C,
0x78, 0xF1, 0xE3, 0x7E, 0xC3, 0x42, 0x66, 0x24, 0x24, 0x3C, 0x18, 0x18,
0x18, 0xC6, 0x34, 0x62, 0x46, 0x26, 0xF6, 0x29, 0x42, 0x94, 0x39, 0x43,
0x0C, 0x10, 0x80, 0xC3, 0x66, 0x2C, 0x18, 0x18, 0x18, 0x2C, 0x66, 0xC3,
0xC3, 0x42, 0x66, 0x24, 0x24, 0x3C, 0x18, 0x18, 0x18, 0x10, 0x10, 0x60,


};


const tiny_gui::Glyph RobotoRegular8Glyphs[] PROGMEM = {
{ 32, 1, 1, 1, 4, 0, 0 }, // ' '
{ 48, 2, 7, 12, 9, 1, -11 }, // '0'
{ 49, 13, 5, 12, 9, 1, -11 }, // '1'
{ 50, 21, 7, 12, 9, 1, -11 }, // '2'
{ 51, 32, 7, 12, 9, 1, -11 }, // '3'
{ 52, 43, 9, 12, 9, 0, -11 }, // '4'
{ 53, 57, 7, 12, 9, 1, -11 }, // '5'
{ 54, 68, 7, 12, 9, 1, -11 }, // '6'
{ 55, 79, 7, 12, 9, 1, -11 }, // '7'
{ 56, 90, 7, 12, 9, 1, -11 }, // '8'
{ 57, 101, 7, 12, 9, 1, -11 }, // '9'
{ 65, 112, 10, 12, 10, 0, -11 }, // 'A'
{ 66, 127, 8, 12, 10, 1, -11 }, // 'B'
{ 67, 139, 9, 12, 10, 1, -11 }, // 'C'
{ 68, 153, 9, 12, 11, 1, -11 }, // 'D'
{ 69, 167, 8, 12, 9, 1, -11 }, // 'E'
{ 70, 179, 7, 12, 9, 1, -11 }, // 'F'
{ 71, 190, 9, 12, 11, 1, -11 }, // 'G'
{ 72, 204, 9, 12, 11, 1, -11 }, // 'H'
{ 73, 218, 2, 12, 4, 1, -11 }, // 'I'
{ 74, 221, 8, 12, 9, 0, -11 }, // 'J'
{ 75, 233, 9, 12, 10, 1, -11 }, // 'K'
{ 76, 247, 7, 12, 9, 1, -11 }, // 'L'
{ 77, 258, 12, 12, 14, 1, -11 }, // 'M'
{ 78, 276, 9, 12, 11, 1, -11 }, // 'N'
{ 79, 290, 9, 12, 11, 1, -11 }, // 'O'
{ 80, 304, 8, 12, 10, 1, -11 }, // 'P'
{ 81, 316, 9, 14, 11, 1, -11 }, // 'Q'
{ 82, 332, 9, 12, 10, 1, -11 }, // 'R'
{ 83, 346, 8, 12, 10, 1, -11 }, // 'S'
{ 84, 358, 9, 12, 10, 0, -11 }, // 'T'
{ 85, 372, 8, 12, 10, 1, -11 }, // 'U'
{ 86, 384, 10, 12, 10, 0, -11 }, // 'V'
{ 87, 399, 14, 12, 14, 0, -11 }, // 'W'
{ 88, 420, 10, 12, 10, 0, -11 }, // 'X'
{ 89, 435, 9, 12, 10, 0, -11 }, // 'Y'
{ 90, 449, 8, 12, 10, 1, -11 }, // 'Z'
{ 97, 461, 7, 9, 9, 1, -8 }, // 'a'
{ 98, 469, 7, 12, 9, 1, -11 }, // 'b'
{ 99, 480, 7, 9, 8, 1, -8 }, // 'c'
{ 100, 488, 7, 12, 9, 1, -11 }, // 'd'
{ 101, 499, 8, 9, 8, 0, -8 }, // 'e'
{ 102, 508, 5, 12, 6, 1, -11 }, // 'f'
{ 103, 516, 7, 12, 9, 1, -8 }, // 'g'
{ 104, 527, 7, 12, 9, 1, -11 }, // 'h'
{ 105, 538, 2, 12, 4, 1, -11 }, // 'i'
{ 106, 541, 3, 15, 4, 0, -11 }, // 'j'
{ 107, 547, 7, 12, 8, 1, -11 }, // 'k'
{ 108, 558, 2, 12, 4, 1, -11 }, // 'l'
{ 109, 561, 12, 9, 14, 1, -8 }, // 'm'
{ 110, 575, 7, 9, 9, 1, -8 }, // 'n'
{ 111, 583, 7, 9, 9, 1, -8 }, // 'o'
{ 112, 591, 7, 12, 9, 1, -8 }, // 'p'
{ 113, 602, 7, 12, 9, 1, -8 }, // 'q'
{ 114, 613, 4, 9, 5, 1, -8 }, // 'r'
{ 115, 618, 6, 9, 8, 1, -8 }, // 's'
{ 116, 625, 5, 11, 5, 0, -10 }, // 't'
{ 117, 632, 7, 9, 9, 1, -8 }, // 'u'
{ 118, 640, 8, 9, 8, 0, -8 }, // 'v'
{ 119, 649, 12, 9, 12, 0, -8 }, // 'w'
{ 120, 663, 8, 9, 8, 0, -8 }, // 'x'
{ 121, 672, 8, 12, 8, 0, -8 }, // 'y'
{ 122, 684, 6, 9, 8, 1, -8 }, // 'z'

};


const tiny_gui::Font RobotoRegular8Font PROGMEM = {
    RobotoRegular8Bitmap,
    RobotoRegular8Glyphs,
    32,
    122,
    0,
    64,
};


#define DATA_FILE(f) (SYNTH_DATA_DIR "/" f)

int main () {
    std::array<uint32_t, 500*500> frame_buffer = {0};
    tiny_gui::FrameBuffer fb{frame_buffer.data(), 500, 500};
    tiny_gui::FrameBufferView<uint32_t> fbv = fb.view<uint32_t>();

    sgl::Context ctx{500,500,"Foo"};
    sgl::MeshResource plane =  sgl::createPlane(1);
    sgl::Shader shader = sgl::loadShader(DATA_FILE("ident_vs.glsl"), DATA_FILE("texture_fs.glsl"));

    sgl::Texture2D fb_tx = sgl::TextureBuilder2D()
        .format(GL_RGBA, GL_RGBA8)
        .build(500, 500);
    
    tiny_gui::Painter::draw_char(fb, RobotoRegular8Font, tiny_gui::RED, 200, 200, 'A');
    tiny_gui::Painter::draw_string(fb, RobotoRegular8Font, tiny_gui::RED, 200, 300, "FUCK you");

    int x = 0;
    tiny_gui::Rect clearRect;
    
    while (ctx.isAlive()){
        glClear(GL_COLOR_BUFFER_BIT);
        ctx.pollEvents();

        x += 1;
        tiny_gui::Painter::fill_rect(fb, {350, 410,200,499}, tiny_gui::BLACK);
        tiny_gui::Painter::draw_string(fb, RobotoRegular8Font, tiny_gui::RED, 200, 400, std::to_string(x));

        sgl::updateTexture(fb_tx, frame_buffer.data());

        shader.bind();
        shader.setTexture("image", fb_tx, 0);

        plane.bind();
        glDrawElements(GL_TRIANGLES, plane.size, GL_UNSIGNED_INT, 0);
        ctx.swapBuffers();
        sglCatchGLError();
    }

}
